// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email_address String        @unique
  phone_number  String?
  password      String?
  first_name    String?
  middle_name   String?
  last_name     String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  source_id     Int?
  cart          Cart[]
  user_address  UserAddress[]

  @@map("users")
}

model Product {
  id            Int             @id @default(autoincrement())
  category_id   Int
  name          String          @unique
  description   String
  product_image String[]
  category      ProductCategory @relation(fields: [category_id], references: [id])
  product_items ProductItem[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt

  @@map("products")
}

model ProductCategory {
  id         Int       @id @default(autoincrement())
  option_id  Int
  name       String    @unique
  products   Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  options    Option[]

  @@map("product_categories")
}

model Option {
  id            Int             @id @default(autoincrement())
  category_id   Int
  option_name   String          @db.VarChar(50)
  category      ProductCategory @relation(fields: [category_id], references: [id])
  option_values OptionValue[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt

  @@map("options")
}

model ProductItem {
  id            Int                      @id @default(autoincrement())
  product_id    Int
  SKU           String                   @db.VarChar(50)
  qty_in_stock  Int
  qty_sold      Int
  price         Decimal                  @db.Decimal(10, 2)
  product       Product                  @relation(fields: [product_id], references: [id])
  option_values ProductItemOptionValue[]
  created_at    DateTime                 @default(now())
  updated_at    DateTime                 @updatedAt
  cart_item     CartItem[]

  @@map("product_items")
}

model OptionValue {
  id            Int                      @id @default(autoincrement())
  option_id     Int
  value         String                   @db.VarChar(50)
  qty_by_option Int
  options       Option                   @relation(fields: [option_id], references: [id])
  product_items ProductItemOptionValue[]
  created_at    DateTime                 @default(now())
  updated_at    DateTime                 @updatedAt

  @@map("option_values")
}

model ProductItemOptionValue {
  product_items_id Int
  option_values_id Int
  product_item     ProductItem @relation(fields: [product_items_id], references: [id])
  option_value     OptionValue @relation(fields: [option_values_id], references: [id])
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  @@id([product_items_id, option_values_id])
  @@map("product_item_option_values")
}

model ShippingMethod {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(25)
  price Decimal @db.Decimal(10, 2)

  @@map("shipping_methods")
}

model OrderStatus {
  id     Int    @id @default(autoincrement())
  status String @db.VarChar(50)

  @@map("order_status")
}

model Cart {
  id        Int        @id @default(autoincrement())
  user_id   Int
  user      User       @relation(fields: [user_id], references: [id])
  cart_item CartItem[]

  @@map("carts")
}

model CartItem {
  id              Int         @id @default(autoincrement())
  cart_id         Int
  product_item_id Int
  qty             Int
  cart            Cart        @relation(fields: [cart_id], references: [id])
  product_item    ProductItem @relation(fields: [product_item_id], references: [id])

  @@map("carts_items")
}

model Address {
  id            Int           @id @default(autoincrement())
  unit_number   String?       @db.VarChar(25)
  address_line1 String        @db.VarChar(50)
  address_line2 String?       @db.VarChar(50)
  city          String        @db.VarChar(25)
  province      String        @db.Char(2)
  postal_code   String        @db.VarChar(6)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  user_address  UserAddress[]

  @@map("addresses")
}

model UserAddress {
  user_id    Int
  address_id Int
  is_default Boolean @db.Boolean
  user       User    @relation(fields: [user_id], references: [id])
  address    Address @relation(fields: [address_id], references: [id])

  @@id([user_id, address_id])
  @@map("user_addresses")
}
